from rest_framework import serializers
from .models import User
from django.contrib.auth.password_validation import validate_password
from datetime import datetime
from backend.utils import print_error



# Handles data validation for user registration
class UserRegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])
    password2 = serializers.CharField(write_only=True, required=True)

    class Meta:
        model = User
        fields = [
            'username',
            'display_name',
            'email',
            'password',
            'password2',
            'access_token',
            'refresh_token',
            'last_refresh',
            'spotify_id',
            'spotify_profile_url',
            'profile_img'
        ]

        # Required for registration
        extra_kwargs = {
            'access_token': {'write_only': True, 'required': True},
            'refresh_token': {'write_only': True, 'required': True},
            'last_refresh': {'required': True},
            'spotify_id': {'required': True}
        }
    
    def validate(self, attrs):
        # Check if confirm password matches password
        if attrs['password'] != attrs['password2']:
            raise serializers.ValidationError({'password': "Passwords didn't match."})
        return attrs
    
    def create(self, validated_data):
        validated_data.pop('password2')
        user = User(
            username=validated_data['username'],
            display_name=validated_data['display_name'],
            email=validated_data['email'],
            access_token=validated_data['access_token'],
            refresh_token=validated_data['refresh_token'],
            last_refresh=validated_data['last_refresh'],
            spotify_id=validated_data['spotify_id'],
            spotify_profile_url=validated_data['spotify_profile_url'],
            profile_img=validated_data['profile_img']
        )
        user.set_password(validated_data['password'])
        user.save()
        return user

# Filters sensitive data from GET requests
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = [
            'id', # autogenerated by django
            'username',
            'email',
            'spotify_id', 
            'access_token', 
            'refresh_token', 
            'last_refresh', 
            'display_name',
            'spotify_profile_url',
            'profile_img'
        ]
        extra_kwargs = {
            # Required fields
            'email': {'required': True},
            'spotify_id': {'required': True},
            'display_name': {'required': True},
            'spotify_profile_url': {'required': True},


            # Don't return these in GET requests
            'access_token': {'write_only': True, 'required': True},
            'refresh_token': {'write_only': True, 'required': True},
            'last_refresh': {'write_only': True, 'required': True},
            'password': {'write_only': True, 'required': True},

            # Extra fields
            'profile_img': {'required': False},
        }
    
    # def update(self, instance, validated_data):
    #     # Handle updating user information, including re-hashing the password if provided
    #     for attr, value in validated_data.items():
    #         if attr == 'password':
    #             instance.set_password(value)
    #         else:
    #             setattr(instance, attr, value)
    #     instance.save()
    #     return instance